// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: transport.proto

package transport

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ServerMessage struct {
	Tasks []*Task `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (m *ServerMessage) Reset()      { *m = ServerMessage{} }
func (*ServerMessage) ProtoMessage() {}
func (*ServerMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{0}
}
func (m *ServerMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerMessage.Merge(m, src)
}
func (m *ServerMessage) XXX_Size() int {
	return m.Size()
}
func (m *ServerMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ServerMessage proto.InternalMessageInfo

func (m *ServerMessage) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type AgentMessage struct {
	Metadata *AgentMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Results  []*TaskResult  `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	Logs     []string       `protobuf:"bytes,3,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (m *AgentMessage) Reset()      { *m = AgentMessage{} }
func (*AgentMessage) ProtoMessage() {}
func (*AgentMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{1}
}
func (m *AgentMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentMessage.Merge(m, src)
}
func (m *AgentMessage) XXX_Size() int {
	return m.Size()
}
func (m *AgentMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AgentMessage proto.InternalMessageInfo

func (m *AgentMessage) GetMetadata() *AgentMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *AgentMessage) GetResults() []*TaskResult {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *AgentMessage) GetLogs() []string {
	if m != nil {
		return m.Logs
	}
	return nil
}

type Task struct {
	Id      int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *Task) Reset()      { *m = Task{} }
func (*Task) ProtoMessage() {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{2}
}
func (m *Task) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return m.Size()
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Task) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type TaskResult struct {
	Id            int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Output        string           `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
	Error         string           `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	ExecStartTime *types.Timestamp `protobuf:"bytes,4,opt,name=execStartTime,proto3" json:"execStartTime,omitempty"`
	ExecStopTime  *types.Timestamp `protobuf:"bytes,5,opt,name=execStopTime,proto3" json:"execStopTime,omitempty"`
}

func (m *TaskResult) Reset()      { *m = TaskResult{} }
func (*TaskResult) ProtoMessage() {}
func (*TaskResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{3}
}
func (m *TaskResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskResult.Merge(m, src)
}
func (m *TaskResult) XXX_Size() int {
	return m.Size()
}
func (m *TaskResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskResult.DiscardUnknown(m)
}

var xxx_messageInfo_TaskResult proto.InternalMessageInfo

func (m *TaskResult) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TaskResult) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func (m *TaskResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *TaskResult) GetExecStartTime() *types.Timestamp {
	if m != nil {
		return m.ExecStartTime
	}
	return nil
}

func (m *TaskResult) GetExecStopTime() *types.Timestamp {
	if m != nil {
		return m.ExecStopTime
	}
	return nil
}

type AgentMetadata struct {
	AgentID     string `protobuf:"bytes,1,opt,name=agentID,proto3" json:"agentID,omitempty"`
	MachineUUID string `protobuf:"bytes,2,opt,name=machineUUID,proto3" json:"machineUUID,omitempty"`
	SessionID   string `protobuf:"bytes,3,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Hostname    string `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	PrimaryIP   string `protobuf:"bytes,5,opt,name=primaryIP,proto3" json:"primaryIP,omitempty"`
	PrimaryMAC  string `protobuf:"bytes,6,opt,name=primaryMAC,proto3" json:"primaryMAC,omitempty"`
}

func (m *AgentMetadata) Reset()      { *m = AgentMetadata{} }
func (*AgentMetadata) ProtoMessage() {}
func (*AgentMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{4}
}
func (m *AgentMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentMetadata.Merge(m, src)
}
func (m *AgentMetadata) XXX_Size() int {
	return m.Size()
}
func (m *AgentMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_AgentMetadata proto.InternalMessageInfo

func (m *AgentMetadata) GetAgentID() string {
	if m != nil {
		return m.AgentID
	}
	return ""
}

func (m *AgentMetadata) GetMachineUUID() string {
	if m != nil {
		return m.MachineUUID
	}
	return ""
}

func (m *AgentMetadata) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *AgentMetadata) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *AgentMetadata) GetPrimaryIP() string {
	if m != nil {
		return m.PrimaryIP
	}
	return ""
}

func (m *AgentMetadata) GetPrimaryMAC() string {
	if m != nil {
		return m.PrimaryMAC
	}
	return ""
}

func init() {
	proto.RegisterType((*ServerMessage)(nil), "transport.ServerMessage")
	proto.RegisterType((*AgentMessage)(nil), "transport.AgentMessage")
	proto.RegisterType((*Task)(nil), "transport.Task")
	proto.RegisterType((*TaskResult)(nil), "transport.TaskResult")
	proto.RegisterType((*AgentMetadata)(nil), "transport.AgentMetadata")
}

func init() { proto.RegisterFile("transport.proto", fileDescriptor_a97e32c760ec1b28) }

var fileDescriptor_a97e32c760ec1b28 = []byte{
	// 475 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x51, 0x3f, 0x6f, 0xd3, 0x40,
	0x14, 0xf7, 0xc5, 0x49, 0x5a, 0xbf, 0x34, 0x54, 0x3a, 0x15, 0x74, 0x8a, 0xd0, 0x61, 0x59, 0x42,
	0xca, 0xe4, 0xa0, 0x82, 0x98, 0x10, 0xa2, 0x90, 0x25, 0x43, 0x25, 0x74, 0x4d, 0x3f, 0xc0, 0x35,
	0x39, 0x5c, 0xab, 0xb1, 0xcf, 0xba, 0xbb, 0x20, 0xd8, 0x58, 0xd9, 0xf8, 0x18, 0x7c, 0x04, 0x76,
	0x16, 0x06, 0x86, 0x8c, 0x1d, 0x89, 0xb3, 0x30, 0x66, 0x64, 0x44, 0x3e, 0xdb, 0xf9, 0x03, 0x43,
	0xb7, 0xfb, 0xfd, 0x7b, 0x4f, 0xbf, 0x7b, 0x70, 0x6c, 0x14, 0x4f, 0x75, 0x26, 0x95, 0x09, 0x33,
	0x25, 0x8d, 0xc4, 0xde, 0x86, 0xe8, 0x3d, 0x8a, 0xa4, 0x8c, 0x66, 0x62, 0x60, 0x85, 0xab, 0xf9,
	0xbb, 0x81, 0x89, 0x13, 0xa1, 0x0d, 0x4f, 0xb2, 0xd2, 0xdb, 0x3b, 0x89, 0x64, 0x24, 0xed, 0x73,
	0x50, 0xbc, 0x4a, 0x36, 0x78, 0x0e, 0xdd, 0x0b, 0xa1, 0xde, 0x0b, 0x75, 0x2e, 0xb4, 0xe6, 0x91,
	0xc0, 0x8f, 0xa1, 0x65, 0xb8, 0xbe, 0xd1, 0x04, 0xf9, 0x6e, 0xbf, 0x73, 0x7a, 0x1c, 0x6e, 0x77,
	0x8e, 0xb9, 0xbe, 0x61, 0xa5, 0x1a, 0x7c, 0x46, 0x70, 0x74, 0x16, 0x89, 0xd4, 0xd4, 0xb9, 0x67,
	0x70, 0x98, 0x08, 0xc3, 0xa7, 0xdc, 0x70, 0x82, 0x7c, 0xd4, 0xef, 0x9c, 0x92, 0x9d, 0x68, 0x65,
	0x2d, 0x75, 0xb6, 0x71, 0xe2, 0x01, 0x1c, 0x28, 0xa1, 0xe7, 0x33, 0xa3, 0x49, 0xc3, 0xee, 0xbb,
	0xff, 0xef, 0x3e, 0xab, 0xb2, 0xda, 0x85, 0x31, 0x34, 0x67, 0x32, 0xd2, 0xc4, 0xf5, 0xdd, 0xbe,
	0xc7, 0xec, 0x3b, 0x78, 0x02, 0xcd, 0xc2, 0x8a, 0xef, 0x41, 0x23, 0x9e, 0xda, 0xe5, 0x2e, 0x6b,
	0xc4, 0x53, 0x4c, 0xe0, 0x60, 0x22, 0x53, 0x23, 0x52, 0x43, 0x1a, 0x3e, 0xea, 0x7b, 0xac, 0x86,
	0xc1, 0x4f, 0x04, 0xb0, 0x9d, 0xfe, 0x5f, 0xf0, 0x01, 0xb4, 0xe5, 0xdc, 0x64, 0xf3, 0x3a, 0x57,
	0x21, 0x7c, 0x02, 0x2d, 0xa1, 0x94, 0x54, 0xc4, 0xb5, 0x74, 0x09, 0xf0, 0x2b, 0xe8, 0x8a, 0x0f,
	0x62, 0x72, 0x61, 0xb8, 0x32, 0xe3, 0x38, 0x11, 0xa4, 0x69, 0xeb, 0xf7, 0xc2, 0xf2, 0x22, 0x61,
	0x7d, 0x91, 0x70, 0x5c, 0x5f, 0x84, 0xed, 0x07, 0xf0, 0x4b, 0x38, 0x2a, 0x09, 0x99, 0xd9, 0x01,
	0xad, 0x3b, 0x07, 0xec, 0xf9, 0x83, 0xef, 0x08, 0xba, 0x7b, 0x3f, 0x5c, 0x54, 0xe7, 0x05, 0x31,
	0x1a, 0xda, 0x5a, 0x1e, 0xab, 0x21, 0xf6, 0xa1, 0x93, 0xf0, 0xc9, 0x75, 0x9c, 0x8a, 0xcb, 0xcb,
	0xd1, 0xb0, 0x2a, 0xb8, 0x4b, 0xe1, 0x87, 0xe0, 0x69, 0xa1, 0x75, 0x2c, 0xd3, 0xd1, 0xb0, 0x6a,
	0xba, 0x25, 0x70, 0x0f, 0x0e, 0xaf, 0xa5, 0x36, 0x29, 0xaf, 0x8a, 0x7a, 0x6c, 0x83, 0x8b, 0x64,
	0xa6, 0xe2, 0x84, 0xab, 0x8f, 0xa3, 0xb7, 0xb6, 0x84, 0xc7, 0xb6, 0x04, 0xa6, 0x00, 0x15, 0x38,
	0x3f, 0x7b, 0x43, 0xda, 0x56, 0xde, 0x61, 0x5e, 0xbf, 0x58, 0x2c, 0xa9, 0x73, 0xbb, 0xa4, 0xce,
	0x7a, 0x49, 0xd1, 0x9f, 0x25, 0x45, 0x9f, 0x72, 0x8a, 0xbe, 0xe6, 0x14, 0x7d, 0xcb, 0x29, 0xfa,
	0x91, 0x53, 0xb4, 0xc8, 0x29, 0xfa, 0x95, 0x53, 0xf4, 0x3b, 0xa7, 0xce, 0x3a, 0xa7, 0xe8, 0xcb,
	0x8a, 0x3a, 0x8b, 0x15, 0x75, 0x6e, 0x57, 0xd4, 0xb9, 0x6a, 0xdb, 0x5f, 0x7a, 0xfa, 0x37, 0x00,
	0x00, 0xff, 0xff, 0x40, 0xd8, 0x70, 0x6a, 0x24, 0x03, 0x00, 0x00,
}

func (this *ServerMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServerMessage)
	if !ok {
		that2, ok := that.(ServerMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Tasks) != len(that1.Tasks) {
		return false
	}
	for i := range this.Tasks {
		if !this.Tasks[i].Equal(that1.Tasks[i]) {
			return false
		}
	}
	return true
}
func (this *AgentMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentMessage)
	if !ok {
		that2, ok := that.(AgentMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if len(this.Results) != len(that1.Results) {
		return false
	}
	for i := range this.Results {
		if !this.Results[i].Equal(that1.Results[i]) {
			return false
		}
	}
	if len(this.Logs) != len(that1.Logs) {
		return false
	}
	for i := range this.Logs {
		if this.Logs[i] != that1.Logs[i] {
			return false
		}
	}
	return true
}
func (this *Task) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Task)
	if !ok {
		that2, ok := that.(Task)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	return true
}
func (this *TaskResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskResult)
	if !ok {
		that2, ok := that.(TaskResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Output != that1.Output {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	if !this.ExecStartTime.Equal(that1.ExecStartTime) {
		return false
	}
	if !this.ExecStopTime.Equal(that1.ExecStopTime) {
		return false
	}
	return true
}
func (this *AgentMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentMetadata)
	if !ok {
		that2, ok := that.(AgentMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AgentID != that1.AgentID {
		return false
	}
	if this.MachineUUID != that1.MachineUUID {
		return false
	}
	if this.SessionID != that1.SessionID {
		return false
	}
	if this.Hostname != that1.Hostname {
		return false
	}
	if this.PrimaryIP != that1.PrimaryIP {
		return false
	}
	if this.PrimaryMAC != that1.PrimaryMAC {
		return false
	}
	return true
}
func (this *ServerMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&transport.ServerMessage{")
	if this.Tasks != nil {
		s = append(s, "Tasks: "+fmt.Sprintf("%#v", this.Tasks)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&transport.AgentMessage{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.Results != nil {
		s = append(s, "Results: "+fmt.Sprintf("%#v", this.Results)+",\n")
	}
	s = append(s, "Logs: "+fmt.Sprintf("%#v", this.Logs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Task) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&transport.Task{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&transport.TaskResult{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Output: "+fmt.Sprintf("%#v", this.Output)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	if this.ExecStartTime != nil {
		s = append(s, "ExecStartTime: "+fmt.Sprintf("%#v", this.ExecStartTime)+",\n")
	}
	if this.ExecStopTime != nil {
		s = append(s, "ExecStopTime: "+fmt.Sprintf("%#v", this.ExecStopTime)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&transport.AgentMetadata{")
	s = append(s, "AgentID: "+fmt.Sprintf("%#v", this.AgentID)+",\n")
	s = append(s, "MachineUUID: "+fmt.Sprintf("%#v", this.MachineUUID)+",\n")
	s = append(s, "SessionID: "+fmt.Sprintf("%#v", this.SessionID)+",\n")
	s = append(s, "Hostname: "+fmt.Sprintf("%#v", this.Hostname)+",\n")
	s = append(s, "PrimaryIP: "+fmt.Sprintf("%#v", this.PrimaryIP)+",\n")
	s = append(s, "PrimaryMAC: "+fmt.Sprintf("%#v", this.PrimaryMAC)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTransport(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ServerMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for iNdEx := len(m.Tasks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tasks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransport(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AgentMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Logs) > 0 {
		for iNdEx := len(m.Logs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Logs[iNdEx])
			copy(dAtA[i:], m.Logs[iNdEx])
			i = encodeVarintTransport(dAtA, i, uint64(len(m.Logs[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransport(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransport(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Task) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintTransport(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTransport(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TaskResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExecStopTime != nil {
		{
			size, err := m.ExecStopTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransport(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ExecStartTime != nil {
		{
			size, err := m.ExecStartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransport(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintTransport(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Output) > 0 {
		i -= len(m.Output)
		copy(dAtA[i:], m.Output)
		i = encodeVarintTransport(dAtA, i, uint64(len(m.Output)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTransport(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AgentMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PrimaryMAC) > 0 {
		i -= len(m.PrimaryMAC)
		copy(dAtA[i:], m.PrimaryMAC)
		i = encodeVarintTransport(dAtA, i, uint64(len(m.PrimaryMAC)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PrimaryIP) > 0 {
		i -= len(m.PrimaryIP)
		copy(dAtA[i:], m.PrimaryIP)
		i = encodeVarintTransport(dAtA, i, uint64(len(m.PrimaryIP)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintTransport(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTransport(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MachineUUID) > 0 {
		i -= len(m.MachineUUID)
		copy(dAtA[i:], m.MachineUUID)
		i = encodeVarintTransport(dAtA, i, uint64(len(m.MachineUUID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AgentID) > 0 {
		i -= len(m.AgentID)
		copy(dAtA[i:], m.AgentID)
		i = encodeVarintTransport(dAtA, i, uint64(len(m.AgentID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTransport(dAtA []byte, offset int, v uint64) int {
	offset -= sovTransport(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedServerMessage(r randyTransport, easy bool) *ServerMessage {
	this := &ServerMessage{}
	if r.Intn(5) != 0 {
		v1 := r.Intn(5)
		this.Tasks = make([]*Task, v1)
		for i := 0; i < v1; i++ {
			this.Tasks[i] = NewPopulatedTask(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAgentMessage(r randyTransport, easy bool) *AgentMessage {
	this := &AgentMessage{}
	if r.Intn(5) != 0 {
		this.Metadata = NewPopulatedAgentMetadata(r, easy)
	}
	if r.Intn(5) != 0 {
		v2 := r.Intn(5)
		this.Results = make([]*TaskResult, v2)
		for i := 0; i < v2; i++ {
			this.Results[i] = NewPopulatedTaskResult(r, easy)
		}
	}
	v3 := r.Intn(10)
	this.Logs = make([]string, v3)
	for i := 0; i < v3; i++ {
		this.Logs[i] = string(randStringTransport(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTask(r randyTransport, easy bool) *Task {
	this := &Task{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.Content = string(randStringTransport(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTaskResult(r randyTransport, easy bool) *TaskResult {
	this := &TaskResult{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.Output = string(randStringTransport(r))
	this.Error = string(randStringTransport(r))
	if r.Intn(5) != 0 {
		this.ExecStartTime = types.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(5) != 0 {
		this.ExecStopTime = types.NewPopulatedTimestamp(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAgentMetadata(r randyTransport, easy bool) *AgentMetadata {
	this := &AgentMetadata{}
	this.AgentID = string(randStringTransport(r))
	this.MachineUUID = string(randStringTransport(r))
	this.SessionID = string(randStringTransport(r))
	this.Hostname = string(randStringTransport(r))
	this.PrimaryIP = string(randStringTransport(r))
	this.PrimaryMAC = string(randStringTransport(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyTransport interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTransport(r randyTransport) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTransport(r randyTransport) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneTransport(r)
	}
	return string(tmps)
}
func randUnrecognizedTransport(r randyTransport, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTransport(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTransport(dAtA []byte, r randyTransport, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTransport(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateTransport(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateTransport(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTransport(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTransport(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTransport(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTransport(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *ServerMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			l = e.Size()
			n += 1 + l + sovTransport(uint64(l))
		}
	}
	return n
}

func (m *AgentMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovTransport(uint64(l))
	}
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovTransport(uint64(l))
		}
	}
	if len(m.Logs) > 0 {
		for _, s := range m.Logs {
			l = len(s)
			n += 1 + l + sovTransport(uint64(l))
		}
	}
	return n
}

func (m *Task) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTransport(uint64(m.Id))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovTransport(uint64(l))
	}
	return n
}

func (m *TaskResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTransport(uint64(m.Id))
	}
	l = len(m.Output)
	if l > 0 {
		n += 1 + l + sovTransport(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovTransport(uint64(l))
	}
	if m.ExecStartTime != nil {
		l = m.ExecStartTime.Size()
		n += 1 + l + sovTransport(uint64(l))
	}
	if m.ExecStopTime != nil {
		l = m.ExecStopTime.Size()
		n += 1 + l + sovTransport(uint64(l))
	}
	return n
}

func (m *AgentMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AgentID)
	if l > 0 {
		n += 1 + l + sovTransport(uint64(l))
	}
	l = len(m.MachineUUID)
	if l > 0 {
		n += 1 + l + sovTransport(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTransport(uint64(l))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovTransport(uint64(l))
	}
	l = len(m.PrimaryIP)
	if l > 0 {
		n += 1 + l + sovTransport(uint64(l))
	}
	l = len(m.PrimaryMAC)
	if l > 0 {
		n += 1 + l + sovTransport(uint64(l))
	}
	return n
}

func sovTransport(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTransport(x uint64) (n int) {
	return sovTransport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ServerMessage) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTasks := "[]*Task{"
	for _, f := range this.Tasks {
		repeatedStringForTasks += strings.Replace(f.String(), "Task", "Task", 1) + ","
	}
	repeatedStringForTasks += "}"
	s := strings.Join([]string{`&ServerMessage{`,
		`Tasks:` + repeatedStringForTasks + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentMessage) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForResults := "[]*TaskResult{"
	for _, f := range this.Results {
		repeatedStringForResults += strings.Replace(f.String(), "TaskResult", "TaskResult", 1) + ","
	}
	repeatedStringForResults += "}"
	s := strings.Join([]string{`&AgentMessage{`,
		`Metadata:` + strings.Replace(this.Metadata.String(), "AgentMetadata", "AgentMetadata", 1) + `,`,
		`Results:` + repeatedStringForResults + `,`,
		`Logs:` + fmt.Sprintf("%v", this.Logs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Task) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Task{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskResult{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Output:` + fmt.Sprintf("%v", this.Output) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`ExecStartTime:` + strings.Replace(fmt.Sprintf("%v", this.ExecStartTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`ExecStopTime:` + strings.Replace(fmt.Sprintf("%v", this.ExecStopTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentMetadata{`,
		`AgentID:` + fmt.Sprintf("%v", this.AgentID) + `,`,
		`MachineUUID:` + fmt.Sprintf("%v", this.MachineUUID) + `,`,
		`SessionID:` + fmt.Sprintf("%v", this.SessionID) + `,`,
		`Hostname:` + fmt.Sprintf("%v", this.Hostname) + `,`,
		`PrimaryIP:` + fmt.Sprintf("%v", this.PrimaryIP) + `,`,
		`PrimaryMAC:` + fmt.Sprintf("%v", this.PrimaryMAC) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTransport(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ServerMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, &Task{})
			if err := m.Tasks[len(m.Tasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &AgentMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &TaskResult{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Output = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecStartTime == nil {
				m.ExecStartTime = &types.Timestamp{}
			}
			if err := m.ExecStartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecStopTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecStopTime == nil {
				m.ExecStopTime = &types.Timestamp{}
			}
			if err := m.ExecStopTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryMAC", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryMAC = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTransport
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTransport
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTransport
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTransport        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransport          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTransport = fmt.Errorf("proto: unexpected end of group")
)
